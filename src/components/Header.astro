---
import logo from "../assets/img/logo.png";
import { Image } from "@astrojs/image/components";
import Button from "./ui/Button.astro";
import BurgerIcon from "./ui/Burger-icon.astro";
import BurgerCloseIcon from "./ui/burger-close-icon.astro";

const navList = [
  {
    text: "Для кого",
    ulr: "#for-who",
  },
  {
    text: "Программа",
    ulr: "#programs",
  },
  {
    text: "Тренеры",
    ulr: "#trainers",
  },
  {
    text: "FAQ",
    ulr: "#faq",
  },
  {
    text: "Контакты",
    ulr: "#contact",
  },
];
---

<div class="sticky">
  <header class="header-mobile" x-data="{ open: false }">
    <Image src={logo} alt="logo" />
    <button class="nav-trigger nav-trigger--open" @click="open = ! open"
      ><BurgerIcon />
    </button>
    <nav class="nav-mobile" :class="open && 'nav-mobile--active'">
      <button class="nav-trigger nav-trigger--close" @click="open = ! open"
        ><BurgerCloseIcon />
      </button>
      <ul class="nav-mobile__ul">
        {
          navList.map((navItem) => (
            <li class="nav-mobile__li">
              <a class="nav-mobile__link" href={navItem.ulr} @click="open = ! open">
                {navItem.text}
              </a>
            </li>
          ))
        }
      </ul>
      <a href="tel:+79991112233" class="nav-mobile__tel">+7 (999) 111–22–33</a>
    </nav>
  </header>
  <header class="header-desktop" id="header-sticky">
    <Image src={logo} alt="logo" />
    <nav class="header_nav">
      <ul class="nav__ul">
        {
          navList.map((navItem) => (
            <li class="nav__li">
              <a class="nav__link" href={navItem.ulr}>
                {navItem.text}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
    <a href="tel:+79991112233" class="header__tel">+7 (999) 111–22–33</a>
    <Button isModal={true} style={"outline"}>Записаться</Button>
  </header>
</div>
<style>
  .header-desktop {
    height: 73px;
    display: flex;
    align-items: center;
    background: var(--color-contrast);
    padding: var(--container-padding);
    padding-right: calc(50vw - 621px);
  }
  .header__tel {
  }

  .header_nav {
    display: flex;
    align-items: center;
    margin-left: 49px;
  }
  .nav__ul {
    display: flex;
    align-items: center;
    gap: 30px;
  }

  .nav__li {
    list-style: none;
  }

  .nav-trigger {
    background: none;
    border: none;
    cursor: pointer;
  }

  .nav__link {
    color: var(--color-main);
    text-decoration: none;
    font-size: 18px;
    transition: all 0.3s ease-in-out;
  }

  .nav__link:is(:hover, :focus) {
    color: var(--color-primary);
  }

  .header__tel {
    font-size: 20px;
    font-weight: 400;
    line-height: 25px;
    color: var(--color-accent-dark);
    text-decoration: none;
    margin-left: 58px;
    margin-right: auto;
  }

  .header-mobile {
    padding: 24px 40px;
    display: none;
    justify-content: space-between;
    max-width: 100%;
    overflow-x: hidden;
  }

  .nav-mobile {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    justify-content: space-between;
    padding: 24px 40px;
    padding-bottom: 100px;
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: 100%;
    background: var(--color-primary);
    transition: all 0.5s ease-in-out;
    transform: translateX(100%);
    z-index: 999;
  }

  .nav-mobile--active {
    transform: translateX(0);
  }

  .nav-mobile__ul {
    align-self: center;
    padding-left: 0;
  }

  .nav-mobile__li {
    list-style: none;
    text-align: center;
  }

  .nav-mobile__li + .nav-mobile__li {
    margin-top: 16px;
  }

  .nav-mobile__link {
    font-size: 24px;
    color: var(--color-contrast);
    text-decoration: none;
  }

  .nav-mobile__tel {
    font-size: 22px;
    color: var(--color-contrast);
    /* color: var(--color-accent); */
    align-self: center;
    text-decoration: none;
  }

  @media (max-width: 1023px) {
    .header-mobile {
      display: flex;
    }
    .header-desktop {
      display: none;
    }
  }
</style>
<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  gsap.registerPlugin(ScrollTrigger);

  const header = document.querySelector(".sticky");

  const showHideHeader = gsap
    .from(header, {
      yPercent: -100,
      duration: 0.25,
      ease: "since.out",
    })
    .progress(1);

  ScrollTrigger.create({
    start: "top top-=" + 100,
    onUpdate: (self) => {
      if (self.direction === -1) {
        showHideHeader.play();
      } else {
        showHideHeader.reverse();
      }
    },
  });
</script>
